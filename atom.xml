<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhimokc.github.io</id>
    <title>zhimokc</title>
    <updated>2021-03-31T05:20:47.436Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhimokc.github.io"/>
    <link rel="self" href="https://zhimokc.github.io/atom.xml"/>
    <subtitle>纸鹤的学习小屋</subtitle>
    <logo>https://zhimokc.github.io/images/avatar.png</logo>
    <icon>https://zhimokc.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, zhimokc</rights>
    <entry>
        <title type="html"><![CDATA[GoF的23种设计模式]]></title>
        <id>https://zhimokc.github.io/post/she-ji-mo-shi-jian-jie/</id>
        <link href="https://zhimokc.github.io/post/she-ji-mo-shi-jian-jie/">
        </link>
        <updated>2021-03-31T05:06:54.000Z</updated>
        <content type="html"><![CDATA[<p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。</p>
<ol>
<li>根据目的来分<br>
根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。</li>
<li>创建型模式：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li>
<li>结构型模式：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li>
<li>行为型模式：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</li>
<li>根据作用范围来分<br>
根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</li>
<li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li>
<li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。<br>
<img src="https://zhimokc.github.io/post-images/1617167453714.png" alt="" loading="lazy"></li>
<li>GoF的23种设计模式的功能<br>
前面说明了 GoF 的 23 种设计模式的分类，现在对各个模式的功能进行介绍。</li>
<li>单例（Singleton）模式：某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。</li>
<li>原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。</li>
<li>工厂方法（Factory Method）模式：定义一个用于创建产品的接口，由子类决定生产什么产品。</li>
<li>抽象工厂（AbstractFactory）模式：提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。</li>
<li>建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。</li>
<li>代理（Proxy）模式：为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。</li>
<li>适配器（Adapter）模式：将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</li>
<li>桥接（Bridge）模式：将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</li>
<li>装饰（Decorator）模式：动态的给对象增加一些职责，即增加其额外的功能。</li>
<li>外观（Facade）模式：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。</li>
<li>享元（Flyweight）模式：运用共享技术来有效地支持大量细粒度对象的复用。</li>
<li>组合（Composite）模式：将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。</li>
<li>模板方法（TemplateMethod）模式：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</li>
<li>策略（Strategy）模式：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。</li>
<li>命令（Command）模式：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。</li>
<li>职责链（Chain of Responsibility）模式：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。</li>
<li>状态（State）模式：允许一个对象在其内部状态发生改变时改变其行为能力。</li>
<li>观察者（Observer）模式：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。</li>
<li>中介者（Mediator）模式：定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。</li>
<li>迭代器（Iterator）模式：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</li>
<li>访问者（Visitor）模式：在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。</li>
<li>备忘录（Memento）模式：在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。</li>
<li>解释器（Interpreter）模式：提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。</li>
</ol>
<p>这 23 种设计模式不是孤立存在的，很多模式之间存在一定的关联关系，在大的系统开发中常常同时使用多种设计模式</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[剑指offer面试题2]]></title>
        <id>https://zhimokc.github.io/post/jian-zhi-offer-mian-shi-ti-2/</id>
        <link href="https://zhimokc.github.io/post/jian-zhi-offer-mian-shi-ti-2/">
        </link>
        <updated>2021-03-29T06:52:50.000Z</updated>
        <content type="html"><![CDATA[<h2 id="面试题2-实现单例模式">面试题2 实现单例模式</h2>
<blockquote>
<p>实现 Singleton 模式</p>
</blockquote>
<pre><code>package algorithm.foroffer;

/**
 * 单例模式：恶汉式，线程安全
 * 步骤：
 *      1. 创建并初始化 private static 变量
 *      2. 私有化构造方法
 *      3. 创建返回单例对象的 public static getInstance 方法
 */
class Singleton1 {
    private final static Singleton1 INSTANCE = new Singleton1();

    private Singleton1(){   }

    public static Singleton1 getInstance(){
        return INSTANCE;
    }

    public static void test(){
        Singleton1 test01 = Singleton1.getInstance();
        Singleton1 test02 = Singleton1.getInstance();
        boolean isEquals = test01.equals(test02);
        String info = String.format(&quot;%s equals %s, %b&quot;, test01, test02, isEquals);
        System.out.println(info);
    }
}

/**
 * 单例模式：懒汉式，线程不安全
 * 步骤：
 *     1. 创建 private static 变量
 *     2. 私有化构造方法
 *     3. 创建返回单例对象的 public static getInstance 方法，如果单例为 null，则创建该对象，之后返回该单例
 */
class Singleton2{
    private static Singleton2 INSTANCE;

    private Singleton2(){}

    public static Singleton2 getInstance(){
        if (INSTANCE == null) INSTANCE = new Singleton2();
        return INSTANCE;
    }

    public static void test(){
        Singleton2 instance01 = Singleton2.getInstance();
        Singleton2 instance02 = Singleton2.getInstance();
        boolean isEquals = instance01.equals(instance02);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance01, instance02, isEquals);
        System.out.println(info);
    }
}


/**
 * 单例模式：静态代码块懒汉式，线程安全
 */
class Singleton3 {
    private static Singleton3  INSTANCE;

    static{
        INSTANCE = new Singleton3 ();
    }

    private Singleton3 (){}

    public static Singleton3  getInstance(){
        return INSTANCE;
    }

    public static void test(){
        Singleton3  instance1 = Singleton3 .getInstance();
        Singleton3  instance2 = Singleton3 .getInstance();
        boolean isEquals = instance1.equals(instance2);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance1, instance2, isEquals);
        System.out.println(info);
    }
}

/**
 * 单例模式：静态内部类，线程安全【推荐，why】
 */
class Singleton4 {
    // todo, what are its advantages
    private final static class SingletonHolder {
        private final static Singleton4 INSTANCE = new Singleton4();
    }

    private Singleton4(){}

    public static Singleton4 getInstance(){
        return SingletonHolder.INSTANCE;
    }

    public static void test(){
        Singleton4 instance1 = Singleton4.getInstance();
        Singleton4 instance2 = Singleton4.getInstance();
        boolean isEquals = instance1.equals(instance2);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance1, instance2, isEquals);
        System.out.println(info);
    }
}


/**
 * 单例模式：synchronized懒汉式，线程安全，多线程环境下效率不高
 */
class Singleton5 {
    private static Singleton5 INSTANCE;

    private Singleton5 (){}

    public static synchronized Singleton5  getInstance(){
        if (INSTANCE == null) INSTANCE = new Singleton5();
        return INSTANCE;
    }

    public static void test(){
        Singleton5 instance1 = Singleton5.getInstance();
        Singleton5 instance2 = Singleton5.getInstance();
        boolean isEquals = instance1.equals(instance2);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance1, instance2, isEquals);
        System.out.println(info);
    }
}

/**
 * 单例模式：(双重校验锁)双重空校验 + 中间的synchronized代码块，线程安全【推荐】
 */
class Singleton6{
    // todo, volatile 关键字
    private volatile static Singleton6 INSTANCE;

    private Singleton6(){}

    public static Singleton6 getInstance(){
        if (INSTANCE == null){
            synchronized(Singleton6.class){
                if (INSTANCE == null) INSTANCE = new Singleton6();
            }
        }
        return INSTANCE;
    }

    public static void test(){
        Singleton6 instance1 = Singleton6.getInstance();
        Singleton6 instance2 = Singleton6.getInstance();
        boolean isEquals = instance1.equals(instance2);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance1, instance2, isEquals);
        System.out.println(info);
    }
}


/**
 * 单例模式：单个实例的枚举，线程安全【推荐】
 */
enum Singleton7{
    //    INSTANCE(&quot;singleton instance&quot;);
    //    private String name;
    //    Singleton7(String name){this.name = name; }
    INSTANCE;

    public static void test(){
        Singleton7 instance1 = Singleton7.INSTANCE;
        Singleton7 instance2 = Singleton7.INSTANCE;
        boolean isEquals = instance1.equals(instance2);
        String info = String.format(&quot;%s equals %s, %b&quot;, instance1, instance2, isEquals);
        System.out.println(info);
    }
}

/**
 * 面试题2：实现Singleton模式
 */
public class Test02 {
    public static void main(String[] args){
        Singleton1.test();
        Singleton2.test();
        Singleton3.test();
        Singleton4.test();
        Singleton5.test();
        Singleton6.test();
        Singleton7.test();
    }
}
</code></pre>
]]></content>
    </entry>
</feed>